1) Definition of JavaScript:
    JavaScript (JS) is a high-level, interpreted, dynamic, and object-oriented programming language mainly used to make web pages interactive.

👉 In short:

HTML = structure (what’s on the page)

CSS = style (how it looks)

JavaScript = behavior (how it works / interacts with users)

Example:

HTML makes a button.

CSS makes it look nice.

JavaScript makes it do something when clicked.

2) Introduction to JavaScript:
    JavaScript was created in 1995 by Brendan Eich while working at Netscape.
    Originally called Mocha → LiveScript → JavaScript (to ride on Java’s popularity at that time).
    It’s now standardized under ECMAScript (ES) specifications.

✅ Today, JS is everywhere:

Web browsers (frontend: dynamic content, animations, form validation)

Servers (backend with Node.js)

Mobile apps (React Native, Ionic)

Desktop apps (Electron)

Game development & IoT


👉 Key Features of JavaScript

Lightweight & Easy to Learn – simple syntax, beginner-friendly.

Interpreted Language – runs directly in browsers (no need to compile).

Dynamic Typing – variables don’t need fixed data types (let x = 10; x = "hello";).

Prototype-based OOP – objects are built from other objects (prototypes).

Event-driven & Asynchronous – handles user actions (clicks, input) and async tasks (fetching data).

Cross-platform – works on Windows, Linux, Mac, browsers, and servers.


👉 Why is JavaScript Important?

    Without JavaScript: websites would be static (just text and images).
    With JavaScript: websites become dynamic & interactive.

👉 Examples of what JS can do:

Show popups and alerts.

Validate forms before submission.

Create image sliders, animations, and menus.

Fetch live data from servers (AJAX, APIs).

Build full apps (like Gmail, Facebook, YouTube frontend).

👉 First Example:

<!DOCTYPE html>
<html>
<head>
  <title>JS Example</title>
</head>
<body>
  <h1>Hello JavaScript</h1>
  <button onclick="greet()">Click Me</button>

  <script>
    function greet() {
      alert("Welcome to JavaScript!");
    }
  </script>
</body>
</html>


👉 Here:

HTML creates the button.

JavaScript adds behavior (alert on click).

3) JavaScript Comments:

👉 Comments are notes written inside your code that are ignored by JavaScript engines.

They don’t affect how the program runs.

They are used to explain code, make it readable, and help in debugging.

Think of comments as notes for humans, not computers.

👉 Types of Comments in JavaScript:

JavaScript supports two types of comments:

1. Single-line Comment (//)

Starts with //.

Anything after // on that line is treated as a comment.

Useful for short notes or disabling one line of code.

Example:

// This is a single-line comment
let name = "Rahul"; // This sets the name variable
    
    
2. Multi-line Comment (/* ... */)

Starts with /* and ends with */.

Can span multiple lines.

Useful for long explanations or commenting out blocks of code.

Example:

/* This is a multi-line comment
It can span multiple lines
Good for detailed notes */
let age = 21;


4) Javascript Variables:

A variable is a named container used to store data in JavaScript.

You can think of it like a box with a label (name of the variable).

The box stores data (numbers, text, objects, etc.).

Later, you can use or change the data stored inside.

👉 Example:

let name = "Rahul";   // storing text (string)
let age = 21;         // storing number
let isStudent = true; // storing boolean

👉 Why Do We Need Variables?

To store values temporarily in memory.

To reuse values multiple times without rewriting them.

To manipulate data dynamically (e.g., score in a game, balance in ATM program).

👉 Rules Of Declare A Variable In JS:

Name Must Start With a letter (a to z , A to Z), Underscore(_),or Dollar ($) sign.

Variable Can not start with a number. After First letter we can use number.
eg: value1.

JavaScript Variables are Case Sensitive.

JavaScript variables can not use reserved keyword.
eg: if, function, class.

JavaScript Variables can not allow spaces (whitespace).

Best Practice: Use camelCase (myName, totalAmount).


👉 Declaring Variables in JavaScript

There are three keywords to declare variables:

1. var (Old way, before ES6)

Function-scoped (available inside a function, not blocks { }).

Can be redeclared (which may cause bugs).

Hoisted (moved to top in memory but set as undefined).

Example:

var city = "Pune";
var city = "Mumbai";   // ✅ Allowed (redeclared)
console.log(city);     // Mumbai


2. let (Modern way, ES6)

Block-scoped (only works inside { }).

Cannot be redeclared in the same block.

Can be reassigned.

Hoisted but exists in a Temporal Dead Zone (TDZ) until initialized (so you get an error if you use it before declaration).

Example:

let age = 20;
// let age = 21; ❌ Error (cannot redeclare)
age = 21;              // ✅ Allowed (reassign)
console.log(age);      // 21


3. const (Constant values)

Block-scoped like let.

Must be initialized when declared.

Cannot be redeclared or reassigned.

But ❗ if you store an object/array, you can still modify its contents (the reference is constant, not the data).

Example:

const PI = 3.1416;
// PI = 3.15; ❌ Error (cannot reassign)

const student = { name: "Rahul" };
student.name = "Kamat"; // ✅ Allowed (changing property)
console.log(student.name); // Kamat


👉 Difference between var, let, and const (Paragraph Explanation):

In JavaScript, variables can be declared using var, let, or const.

1. var is the oldest way (before ES6, 2015). It is function-scoped, meaning it is only limited to the function in which it is declared, 
not blocks like if or for. It can be redeclared and reassigned, but it can cause unexpected behavior due to hoisting 
(it gets moved to the top of its scope and initialized with undefined).

2. let was introduced in ES6 to fix these problems. It is block-scoped, meaning it exists only inside { } where it’s defined. 
It cannot be redeclared in the same scope, but it can be reassigned. Unlike var, it is hoisted but stays in the Temporal 
Dead Zone (TDZ) until initialized.

3. const is also block-scoped like let, but the difference is that it must be initialized at the time of declaration and 
cannot be reassigned later. However, if a const holds an object or array, its contents can still be modified — only the reference cannot change.


👉 Difference between var, let, and const (Table Format):

| Feature              | `var` (Old)                    | `let` (ES6)                       | `const` (ES6)                     |
| -------------------- | ------------------------------ | --------------------------------- | --------------------------------- |
| **Scope**            | Function-scoped                | Block-scoped                      | Block-scoped                      |
| **Redeclaration**    | ✅ Allowed                      | ❌ Not allowed                     | ❌ Not allowed                     |
| **Reassignment**     | ✅ Allowed                      | ✅ Allowed                         | ❌ Not allowed                     |
| **Must Initialize?** | ❌ No                           | ❌ No                              | ✅ Yes                             |
| **Hoisting**         | ✅ Hoisted (set to `undefined`) | ✅ Hoisted (TDZ until initialized) | ✅ Hoisted (TDZ until initialized) |
| **Use Case**         | Legacy code (avoid)            | Variables that change values      | Constants, fixed references       |


👉 Scope Of Variable:

What is Scope?

Scope in JavaScript determines where a variable is accessible in your code.
It answers the question:
➡️ “From which part of the program can I use this variable?”

Types of Scope in JavaScript:

1. Global Scope 🌍

A variable declared outside any function or block { } is global.

Global variables are accessible everywhere in the program.

They live as long as the program runs.

Example:

let globalVar = "I am global"; // Global scope

function test() {
  console.log(globalVar); // ✅ Accessible here
}

test();
console.log(globalVar); // ✅ Accessible here too


⚠️ Problem: Too many global variables may cause naming conflicts and memory leaks.


2. Function Scope (Local Scope) 🔧

Variables declared inside a function are local to that function.

They cannot be accessed outside.

Applies to var, let, and const when declared inside a function.

Example:

function myFunc() {
  let localVar = "I am local";
  console.log(localVar); // ✅ Works
}

myFunc();
console.log(localVar); // ❌ Error (not defined outside)


3. Block Scope 🧱 (introduced in ES6)

Applies to variables declared with let and const inside { }.

They are only available inside that block.

var ❌ does NOT support block scope (it ignores { }).

Example:

if (true) {
  var x = 10;  // Function scoped
  let y = 20;  // Block scoped
  const z = 30; // Block scoped
  console.log(x, y, z); // ✅ 10 20 30
}

console.log(x); // ✅ 10 (var leaks out of block)
console.log(y); // ❌ Error
console.log(z); // ❌ Error

✅ In Summary:

Global Scope → accessible everywhere.

Function Scope → accessible inside a function.

Block Scope → accessible only inside { } (for let and const).